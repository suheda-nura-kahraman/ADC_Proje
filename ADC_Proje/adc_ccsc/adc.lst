CCS PCM C Compiler, Version 5.007, 61971               22-Kas-22 21:04

               Filename:   C:\Users\MyFORM\Desktop\ADC_Proje\adc_ccsc\adc.lst

               ROM used:   1206 words (15%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           37 (10%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   434
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0A,10
000D:  DATA D6,37
000E:  DATA 6C,3A
000F:  DATA BD,12
0010:  DATA 66,10
0011:  DATA 56,00
*
00AC:  MOVLW  8E
00AD:  MOVWF  77
00AE:  MOVF   27,W
00AF:  MOVWF  78
00B0:  MOVF   26,W
00B1:  MOVWF  79
00B2:  CLRF   7A
00B3:  MOVF   78,F
00B4:  BTFSS  03.2
00B5:  GOTO   0C0
00B6:  MOVF   79,W
00B7:  MOVWF  78
00B8:  CLRF   79
00B9:  MOVLW  08
00BA:  SUBWF  77,F
00BB:  MOVF   78,F
00BC:  BTFSS  03.2
00BD:  GOTO   0C0
00BE:  CLRF   77
00BF:  GOTO   0C8
00C0:  BCF    03.0
00C1:  BTFSC  78.7
00C2:  GOTO   0C7
00C3:  RLF    79,F
00C4:  RLF    78,F
00C5:  DECF   77,F
00C6:  GOTO   0C0
00C7:  BCF    78.7
00C8:  BCF    0A.3
00C9:  BCF    0A.4
00CA:  GOTO   471 (RETURN)
00CB:  MOVF   26,W
00CC:  BTFSC  03.2
00CD:  GOTO   190
00CE:  MOVWF  32
00CF:  MOVF   2A,W
00D0:  BTFSC  03.2
00D1:  GOTO   190
00D2:  SUBWF  32,F
00D3:  BTFSS  03.0
00D4:  GOTO   0DA
00D5:  MOVLW  7F
00D6:  ADDWF  32,F
00D7:  BTFSC  03.0
00D8:  GOTO   190
00D9:  GOTO   0E0
00DA:  MOVLW  81
00DB:  SUBWF  32,F
00DC:  BTFSS  03.0
00DD:  GOTO   190
00DE:  BTFSC  03.2
00DF:  GOTO   190
00E0:  MOVF   32,W
00E1:  MOVWF  77
00E2:  CLRF   78
00E3:  CLRF   79
00E4:  CLRF   7A
00E5:  CLRF   31
00E6:  MOVF   27,W
00E7:  MOVWF  30
00E8:  BSF    30.7
00E9:  MOVF   28,W
00EA:  MOVWF  2F
00EB:  MOVF   29,W
00EC:  MOVWF  2E
00ED:  MOVLW  19
00EE:  MOVWF  32
00EF:  MOVF   2D,W
00F0:  SUBWF  2E,F
00F1:  BTFSC  03.0
00F2:  GOTO   103
00F3:  MOVLW  01
00F4:  SUBWF  2F,F
00F5:  BTFSC  03.0
00F6:  GOTO   103
00F7:  SUBWF  30,F
00F8:  BTFSC  03.0
00F9:  GOTO   103
00FA:  SUBWF  31,F
00FB:  BTFSC  03.0
00FC:  GOTO   103
00FD:  INCF   31,F
00FE:  INCF   30,F
00FF:  INCF   2F,F
0100:  MOVF   2D,W
0101:  ADDWF  2E,F
0102:  GOTO   135
0103:  MOVF   2C,W
0104:  SUBWF  2F,F
0105:  BTFSC  03.0
0106:  GOTO   11E
0107:  MOVLW  01
0108:  SUBWF  30,F
0109:  BTFSC  03.0
010A:  GOTO   11E
010B:  SUBWF  31,F
010C:  BTFSC  03.0
010D:  GOTO   11E
010E:  INCF   31,F
010F:  INCF   30,F
0110:  MOVF   2C,W
0111:  ADDWF  2F,F
0112:  MOVF   2D,W
0113:  ADDWF  2E,F
0114:  BTFSS  03.0
0115:  GOTO   135
0116:  INCF   2F,F
0117:  BTFSS  03.2
0118:  GOTO   135
0119:  INCF   30,F
011A:  BTFSS  03.2
011B:  GOTO   135
011C:  INCF   31,F
011D:  GOTO   135
011E:  MOVF   2B,W
011F:  IORLW  80
0120:  SUBWF  30,F
0121:  BTFSC  03.0
0122:  GOTO   134
0123:  MOVLW  01
0124:  SUBWF  31,F
0125:  BTFSC  03.0
0126:  GOTO   134
0127:  INCF   31,F
0128:  MOVF   2B,W
0129:  IORLW  80
012A:  ADDWF  30,F
012B:  MOVF   2C,W
012C:  ADDWF  2F,F
012D:  BTFSS  03.0
012E:  GOTO   112
012F:  INCF   30,F
0130:  BTFSS  03.2
0131:  GOTO   112
0132:  INCF   31,F
0133:  GOTO   112
0134:  BSF    7A.0
0135:  DECFSZ 32,F
0136:  GOTO   138
0137:  GOTO   143
0138:  BCF    03.0
0139:  RLF    2E,F
013A:  RLF    2F,F
013B:  RLF    30,F
013C:  RLF    31,F
013D:  BCF    03.0
013E:  RLF    7A,F
013F:  RLF    79,F
0140:  RLF    78,F
0141:  RLF    33,F
0142:  GOTO   0EF
0143:  BTFSS  33.0
0144:  GOTO   14B
0145:  BCF    03.0
0146:  RRF    78,F
0147:  RRF    79,F
0148:  RRF    7A,F
0149:  RRF    33,F
014A:  GOTO   14E
014B:  DECF   77,F
014C:  BTFSC  03.2
014D:  GOTO   190
014E:  BTFSC  33.7
014F:  GOTO   177
0150:  BCF    03.0
0151:  RLF    2E,F
0152:  RLF    2F,F
0153:  RLF    30,F
0154:  RLF    31,F
0155:  MOVF   2D,W
0156:  SUBWF  2E,F
0157:  BTFSC  03.0
0158:  GOTO   163
0159:  MOVLW  01
015A:  SUBWF  2F,F
015B:  BTFSC  03.0
015C:  GOTO   163
015D:  SUBWF  30,F
015E:  BTFSC  03.0
015F:  GOTO   163
0160:  SUBWF  31,F
0161:  BTFSS  03.0
0162:  GOTO   186
0163:  MOVF   2C,W
0164:  SUBWF  2F,F
0165:  BTFSC  03.0
0166:  GOTO   16E
0167:  MOVLW  01
0168:  SUBWF  30,F
0169:  BTFSC  03.0
016A:  GOTO   16E
016B:  SUBWF  31,F
016C:  BTFSS  03.0
016D:  GOTO   186
016E:  MOVF   2B,W
016F:  IORLW  80
0170:  SUBWF  30,F
0171:  BTFSC  03.0
0172:  GOTO   177
0173:  MOVLW  01
0174:  SUBWF  31,F
0175:  BTFSS  03.0
0176:  GOTO   186
0177:  INCF   7A,F
0178:  BTFSS  03.2
0179:  GOTO   186
017A:  INCF   79,F
017B:  BTFSS  03.2
017C:  GOTO   186
017D:  INCF   78,F
017E:  BTFSS  03.2
017F:  GOTO   186
0180:  INCF   77,F
0181:  BTFSC  03.2
0182:  GOTO   190
0183:  RRF    78,F
0184:  RRF    79,F
0185:  RRF    7A,F
0186:  MOVF   27,W
0187:  MOVWF  32
0188:  MOVF   2B,W
0189:  XORWF  32,F
018A:  BTFSS  32.7
018B:  GOTO   18E
018C:  BSF    78.7
018D:  GOTO   194
018E:  BCF    78.7
018F:  GOTO   194
0190:  CLRF   77
0191:  CLRF   78
0192:  CLRF   79
0193:  CLRF   7A
0194:  BCF    0A.3
0195:  BCF    0A.4
0196:  GOTO   482 (RETURN)
*
01D5:  CLRF   2E
01D6:  MOVF   04,W
01D7:  MOVWF  2D
01D8:  BCF    2E.0
01D9:  BTFSC  03.7
01DA:  BSF    2E.0
01DB:  SWAPF  27,W
01DC:  IORLW  F0
01DD:  MOVWF  29
01DE:  ADDWF  29,F
01DF:  ADDLW  E2
01E0:  MOVWF  2A
01E1:  ADDLW  32
01E2:  MOVWF  2C
01E3:  MOVF   27,W
01E4:  ANDLW  0F
01E5:  ADDWF  2A,F
01E6:  ADDWF  2A,F
01E7:  ADDWF  2C,F
01E8:  ADDLW  E9
01E9:  MOVWF  2B
01EA:  ADDWF  2B,F
01EB:  ADDWF  2B,F
01EC:  SWAPF  26,W
01ED:  ANDLW  0F
01EE:  ADDWF  2B,F
01EF:  ADDWF  2C,F
01F0:  RLF    2B,F
01F1:  RLF    2C,F
01F2:  COMF   2C,F
01F3:  RLF    2C,F
01F4:  MOVF   26,W
01F5:  ANDLW  0F
01F6:  ADDWF  2C,F
01F7:  RLF    29,F
01F8:  MOVLW  07
01F9:  MOVWF  28
01FA:  MOVLW  0A
01FB:  ADDWF  2C,F
01FC:  DECF   2B,F
01FD:  BTFSS  03.0
01FE:  GOTO   1FB
01FF:  ADDWF  2B,F
0200:  DECF   2A,F
0201:  BTFSS  03.0
0202:  GOTO   1FF
0203:  ADDWF  2A,F
0204:  DECF   29,F
0205:  BTFSS  03.0
0206:  GOTO   203
0207:  ADDWF  29,F
0208:  DECF   28,F
0209:  BTFSS  03.0
020A:  GOTO   207
020B:  MOVLW  28
020C:  MOVWF  04
020D:  BCF    03.7
020E:  MOVLW  07
020F:  ANDWF  2D,W
0210:  BCF    2D.6
0211:  ADDWF  04,F
0212:  MOVLW  2C
0213:  SUBWF  04,W
0214:  BTFSC  03.2
0215:  BSF    2D.6
0216:  MOVF   00,W
0217:  MOVWF  77
0218:  BTFSS  03.2
0219:  GOTO   222
021A:  BTFSC  2D.6
021B:  GOTO   222
021C:  BTFSC  2D.4
021D:  GOTO   234
021E:  BTFSC  2D.3
021F:  GOTO   222
0220:  MOVLW  20
0221:  GOTO   225
0222:  BSF    2D.3
0223:  BCF    2D.4
0224:  MOVLW  30
0225:  ADDWF  77,F
0226:  CLRF   27
0227:  MOVF   04,W
0228:  MOVWF  26
0229:  BCF    27.0
022A:  BTFSC  03.7
022B:  BSF    27.0
022C:  MOVF   77,W
022D:  MOVWF  33
022E:  CALL   1A9
022F:  MOVF   26,W
0230:  MOVWF  04
0231:  BCF    03.7
0232:  BTFSC  27.0
0233:  BSF    03.7
0234:  INCF   04,F
0235:  BTFSS  2D.6
0236:  GOTO   212
0237:  BCF    0A.3
0238:  BCF    0A.4
0239:  GOTO   494 (RETURN)
023A:  MOVF   0B,W
023B:  MOVWF  27
023C:  BCF    0B.7
023D:  BSF    03.5
023E:  BSF    03.6
023F:  BSF    0C.7
0240:  BSF    0C.0
0241:  NOP
0242:  NOP
0243:  BTFSC  03.0
0244:  GOTO   26C
0245:  BCF    03.5
0246:  MOVF   0C,W
0247:  ANDLW  7F
0248:  BCF    03.6
0249:  MOVWF  28
024A:  BSF    03.6
024B:  MOVF   0D,W
024C:  BCF    03.6
024D:  MOVWF  29
024E:  BSF    03.6
024F:  MOVF   0F,W
0250:  BCF    03.6
0251:  MOVWF  2A
0252:  MOVF   28,W
0253:  MOVWF  33
0254:  CALL   1A9
0255:  MOVF   29,W
0256:  BSF    03.6
0257:  MOVWF  0D
0258:  BCF    03.6
0259:  MOVF   2A,W
025A:  BSF    03.6
025B:  MOVWF  0F
025C:  BSF    03.5
025D:  BSF    0C.7
025E:  BSF    0C.0
025F:  NOP
0260:  NOP
0261:  BCF    03.5
0262:  BCF    03.6
0263:  DECFSZ 26,F
0264:  GOTO   266
0265:  GOTO   269
0266:  BSF    03.5
0267:  BSF    03.6
0268:  GOTO   26C
0269:  GOTO   28B
026A:  BSF    03.5
026B:  BSF    03.6
026C:  BCF    03.5
026D:  RLF    0C,W
026E:  RLF    0E,W
026F:  ANDLW  7F
0270:  BCF    03.6
0271:  MOVWF  28
0272:  BSF    03.6
0273:  MOVF   0D,W
0274:  BCF    03.6
0275:  MOVWF  29
0276:  BSF    03.6
0277:  MOVF   0F,W
0278:  BCF    03.6
0279:  MOVWF  2A
027A:  MOVF   28,W
027B:  MOVWF  33
027C:  CALL   1A9
027D:  MOVF   29,W
027E:  BSF    03.6
027F:  MOVWF  0D
0280:  BCF    03.6
0281:  MOVF   2A,W
0282:  BSF    03.6
0283:  MOVWF  0F
0284:  INCF   0D,F
0285:  BTFSC  03.2
0286:  INCF   0F,F
0287:  BCF    03.0
0288:  BCF    03.6
0289:  DECFSZ 26,F
028A:  GOTO   23D
028B:  BTFSC  27.7
028C:  BSF    0B.7
028D:  BCF    0A.3
028E:  BCF    0A.4
028F:  GOTO   49E (RETURN)
0290:  BTFSC  03.1
0291:  GOTO   295
0292:  MOVLW  3B
0293:  MOVWF  04
0294:  BCF    03.7
0295:  CLRF   77
0296:  CLRF   78
0297:  CLRF   79
0298:  CLRF   7A
0299:  CLRF   3B
029A:  CLRF   3C
029B:  CLRF   3D
029C:  CLRF   3E
029D:  MOVF   3A,W
029E:  IORWF  39,W
029F:  IORWF  38,W
02A0:  IORWF  37,W
02A1:  BTFSC  03.2
02A2:  GOTO   2D3
02A3:  MOVLW  20
02A4:  MOVWF  3F
02A5:  BCF    03.0
02A6:  RLF    33,F
02A7:  RLF    34,F
02A8:  RLF    35,F
02A9:  RLF    36,F
02AA:  RLF    3B,F
02AB:  RLF    3C,F
02AC:  RLF    3D,F
02AD:  RLF    3E,F
02AE:  MOVF   3A,W
02AF:  SUBWF  3E,W
02B0:  BTFSS  03.2
02B1:  GOTO   2BC
02B2:  MOVF   39,W
02B3:  SUBWF  3D,W
02B4:  BTFSS  03.2
02B5:  GOTO   2BC
02B6:  MOVF   38,W
02B7:  SUBWF  3C,W
02B8:  BTFSS  03.2
02B9:  GOTO   2BC
02BA:  MOVF   37,W
02BB:  SUBWF  3B,W
02BC:  BTFSS  03.0
02BD:  GOTO   2CD
02BE:  MOVF   37,W
02BF:  SUBWF  3B,F
02C0:  MOVF   38,W
02C1:  BTFSS  03.0
02C2:  INCFSZ 38,W
02C3:  SUBWF  3C,F
02C4:  MOVF   39,W
02C5:  BTFSS  03.0
02C6:  INCFSZ 39,W
02C7:  SUBWF  3D,F
02C8:  MOVF   3A,W
02C9:  BTFSS  03.0
02CA:  INCFSZ 3A,W
02CB:  SUBWF  3E,F
02CC:  BSF    03.0
02CD:  RLF    77,F
02CE:  RLF    78,F
02CF:  RLF    79,F
02D0:  RLF    7A,F
02D1:  DECFSZ 3F,F
02D2:  GOTO   2A5
02D3:  MOVF   3B,W
02D4:  MOVWF  00
02D5:  INCF   04,F
02D6:  MOVF   3C,W
02D7:  MOVWF  00
02D8:  INCF   04,F
02D9:  MOVF   3D,W
02DA:  MOVWF  00
02DB:  INCF   04,F
02DC:  MOVF   3E,W
02DD:  MOVWF  00
02DE:  RETURN
02DF:  MOVF   04,W
02E0:  MOVWF  2B
02E1:  MOVF   2A,W
02E2:  MOVWF  2D
02E3:  BTFSC  03.2
02E4:  GOTO   371
02E5:  MOVF   29,W
02E6:  MOVWF  36
02E7:  MOVF   28,W
02E8:  MOVWF  35
02E9:  MOVF   27,W
02EA:  MOVWF  34
02EB:  MOVF   26,W
02EC:  MOVWF  33
02ED:  CLRF   3A
02EE:  CLRF   39
02EF:  MOVLW  20
02F0:  MOVWF  38
02F1:  MOVLW  82
02F2:  MOVWF  37
02F3:  MOVF   33,W
02F4:  BTFSC  03.2
02F5:  GOTO   363
02F6:  MOVWF  3B
02F7:  MOVF   37,W
02F8:  BTFSC  03.2
02F9:  GOTO   363
02FA:  ADDWF  3B,F
02FB:  BTFSC  03.0
02FC:  GOTO   304
02FD:  MOVLW  7F
02FE:  SUBWF  3B,F
02FF:  BTFSS  03.0
0300:  GOTO   363
0301:  BTFSC  03.2
0302:  GOTO   363
0303:  GOTO   308
0304:  MOVLW  81
0305:  ADDWF  3B,F
0306:  BTFSC  03.0
0307:  GOTO   363
0308:  MOVF   3B,W
0309:  MOVWF  77
030A:  CLRF   78
030B:  CLRF   79
030C:  CLRF   7A
030D:  MOVF   34,W
030E:  MOVWF  3F
030F:  BSF    3F.7
0310:  MOVF   35,W
0311:  MOVWF  3E
0312:  MOVF   36,W
0313:  MOVWF  3D
0314:  MOVLW  18
0315:  MOVWF  3B
0316:  CLRF   3C
0317:  BTFSS  3D.0
0318:  GOTO   331
0319:  MOVF   3A,W
031A:  ADDWF  7A,F
031B:  BTFSS  03.0
031C:  GOTO   323
031D:  INCF   79,F
031E:  BTFSS  03.2
031F:  GOTO   323
0320:  INCF   78,F
0321:  BTFSC  03.2
0322:  BSF    3C.7
0323:  MOVF   39,W
0324:  ADDWF  79,F
0325:  BTFSS  03.0
0326:  GOTO   32A
0327:  INCF   78,F
0328:  BTFSC  03.2
0329:  BSF    3C.7
032A:  MOVF   38,W
032B:  MOVWF  35
032C:  BSF    35.7
032D:  MOVF   35,W
032E:  ADDWF  78,F
032F:  BTFSC  03.0
0330:  BSF    3C.7
0331:  RLF    3C,F
0332:  RRF    78,F
0333:  RRF    79,F
0334:  RRF    7A,F
0335:  RRF    3F,F
0336:  RRF    3E,F
0337:  RRF    3D,F
0338:  BCF    03.0
0339:  DECFSZ 3B,F
033A:  GOTO   316
033B:  MOVLW  01
033C:  ADDWF  77,F
033D:  BTFSC  03.0
033E:  GOTO   363
033F:  BTFSC  78.7
0340:  GOTO   348
0341:  RLF    3F,F
0342:  RLF    7A,F
0343:  RLF    79,F
0344:  RLF    78,F
0345:  DECF   77,F
0346:  BTFSC  03.2
0347:  GOTO   363
0348:  BTFSS  3F.7
0349:  GOTO   359
034A:  INCF   7A,F
034B:  BTFSS  03.2
034C:  GOTO   359
034D:  INCF   79,F
034E:  BTFSS  03.2
034F:  GOTO   359
0350:  INCF   78,F
0351:  BTFSS  03.2
0352:  GOTO   359
0353:  RRF    78,F
0354:  RRF    79,F
0355:  RRF    7A,F
0356:  INCF   77,F
0357:  BTFSC  03.2
0358:  GOTO   363
0359:  MOVF   34,W
035A:  MOVWF  3C
035B:  MOVF   38,W
035C:  XORWF  3C,F
035D:  BTFSS  3C.7
035E:  GOTO   361
035F:  BSF    78.7
0360:  GOTO   367
0361:  BCF    78.7
0362:  GOTO   367
0363:  CLRF   77
0364:  CLRF   78
0365:  CLRF   79
0366:  CLRF   7A
0367:  MOVF   7A,W
0368:  MOVWF  29
0369:  MOVF   79,W
036A:  MOVWF  28
036B:  MOVF   78,W
036C:  MOVWF  27
036D:  MOVF   77,W
036E:  MOVWF  26
036F:  DECFSZ 2D,F
0370:  GOTO   2E5
0371:  MOVF   29,W
0372:  MOVWF  36
0373:  MOVF   28,W
0374:  MOVWF  35
0375:  MOVF   27,W
0376:  MOVWF  34
0377:  MOVF   26,W
0378:  MOVWF  33
0379:  MOVF   33,W
037A:  SUBLW  B6
037B:  MOVWF  33
037C:  CLRF   7A
037D:  MOVF   34,W
037E:  MOVWF  37
037F:  BSF    34.7
0380:  BCF    03.0
0381:  RRF    34,F
0382:  RRF    35,F
0383:  RRF    36,F
0384:  RRF    7A,F
0385:  RRF    79,F
0386:  RRF    78,F
0387:  RRF    77,F
0388:  DECFSZ 33,F
0389:  GOTO   380
038A:  BTFSS  37.7
038B:  GOTO   397
038C:  COMF   77,F
038D:  COMF   78,F
038E:  COMF   79,F
038F:  COMF   7A,F
0390:  INCF   77,F
0391:  BTFSC  03.2
0392:  INCF   78,F
0393:  BTFSC  03.2
0394:  INCF   79,F
0395:  BTFSC  03.2
0396:  INCF   7A,F
0397:  MOVF   7A,W
0398:  MOVWF  29
0399:  MOVF   79,W
039A:  MOVWF  28
039B:  MOVF   78,W
039C:  MOVWF  27
039D:  MOVF   77,W
039E:  MOVWF  26
039F:  BTFSS  29.7
03A0:  GOTO   3AE
03A1:  DECF   2B,F
03A2:  BSF    2B.5
03A3:  COMF   26,F
03A4:  COMF   27,F
03A5:  COMF   28,F
03A6:  COMF   29,F
03A7:  INCF   26,F
03A8:  BTFSC  03.2
03A9:  INCF   27,F
03AA:  BTFSC  03.2
03AB:  INCF   28,F
03AC:  BTFSC  03.2
03AD:  INCF   29,F
03AE:  MOVLW  3B
03AF:  MOVWF  32
03B0:  MOVLW  9A
03B1:  MOVWF  31
03B2:  MOVLW  CA
03B3:  MOVWF  30
03B4:  CLRF   2F
03B5:  MOVLW  0A
03B6:  MOVWF  2D
03B7:  MOVF   2A,W
03B8:  BTFSC  03.2
03B9:  INCF   2B,F
03BA:  BSF    03.1
03BB:  MOVLW  26
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  MOVF   29,W
03BF:  MOVWF  36
03C0:  MOVF   28,W
03C1:  MOVWF  35
03C2:  MOVF   27,W
03C3:  MOVWF  34
03C4:  MOVF   26,W
03C5:  MOVWF  33
03C6:  MOVF   32,W
03C7:  MOVWF  3A
03C8:  MOVF   31,W
03C9:  MOVWF  39
03CA:  MOVF   30,W
03CB:  MOVWF  38
03CC:  MOVF   2F,W
03CD:  MOVWF  37
03CE:  CALL   290
03CF:  MOVF   78,W
03D0:  MOVF   77,F
03D1:  BTFSS  03.2
03D2:  GOTO   3E6
03D3:  INCF   2A,W
03D4:  SUBWF  2D,W
03D5:  BTFSC  03.2
03D6:  GOTO   3E6
03D7:  MOVF   2B,W
03D8:  BTFSC  03.2
03D9:  GOTO   3E8
03DA:  ANDLW  0F
03DB:  SUBWF  2D,W
03DC:  BTFSC  03.2
03DD:  GOTO   3E0
03DE:  BTFSC  03.0
03DF:  GOTO   418
03E0:  BTFSC  2B.7
03E1:  GOTO   418
03E2:  BTFSC  2B.6
03E3:  GOTO   3E8
03E4:  MOVLW  20
03E5:  GOTO   414
03E6:  MOVLW  20
03E7:  ANDWF  2B,F
03E8:  BTFSS  2B.5
03E9:  GOTO   3F6
03EA:  BCF    2B.5
03EB:  MOVF   2A,W
03EC:  BTFSS  03.2
03ED:  DECF   2B,F
03EE:  MOVF   77,W
03EF:  MOVWF  2B
03F0:  MOVLW  2D
03F1:  MOVWF  33
03F2:  CALL   1A9
03F3:  MOVF   2B,W
03F4:  MOVWF  77
03F5:  CLRF   2B
03F6:  MOVF   2A,W
03F7:  SUBWF  2D,W
03F8:  BTFSS  03.2
03F9:  GOTO   404
03FA:  MOVF   77,W
03FB:  MOVWF  2B
03FC:  MOVLW  2E
03FD:  MOVWF  33
03FE:  CALL   1A9
03FF:  MOVF   2B,W
0400:  MOVWF  77
0401:  MOVLW  20
0402:  ANDWF  2B,F
0403:  MOVLW  00
0404:  MOVLW  30
0405:  BTFSS  2B.5
0406:  GOTO   414
0407:  BCF    2B.5
0408:  MOVF   2A,W
0409:  BTFSS  03.2
040A:  DECF   2B,F
040B:  MOVF   77,W
040C:  MOVWF  2B
040D:  MOVLW  2D
040E:  MOVWF  33
040F:  CALL   1A9
0410:  MOVF   2B,W
0411:  MOVWF  77
0412:  CLRF   2B
0413:  MOVLW  30
0414:  ADDWF  77,F
0415:  MOVF   77,W
0416:  MOVWF  33
0417:  CALL   1A9
0418:  BCF    03.1
0419:  MOVF   32,W
041A:  MOVWF  36
041B:  MOVF   31,W
041C:  MOVWF  35
041D:  MOVF   30,W
041E:  MOVWF  34
041F:  MOVF   2F,W
0420:  MOVWF  33
0421:  CLRF   3A
0422:  CLRF   39
0423:  CLRF   38
0424:  MOVLW  0A
0425:  MOVWF  37
0426:  CALL   290
0427:  MOVF   7A,W
0428:  MOVWF  32
0429:  MOVF   79,W
042A:  MOVWF  31
042B:  MOVF   78,W
042C:  MOVWF  30
042D:  MOVF   77,W
042E:  MOVWF  2F
042F:  DECFSZ 2D,F
0430:  GOTO   3BA
0431:  BCF    0A.3
0432:  BCF    0A.4
0433:  GOTO   4AB (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock=4000000) 
*
0012:  MOVLW  34
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #fuses XT,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003F:  MOVLW  0F
0040:  BSF    03.5
0041:  ANDWF  06,W
0042:  IORLW  F0
0043:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0044:  BCF    03.5
0045:  BSF    06.2
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BSF    06.0
....................    delay_cycles(1); 
0048:  NOP
....................    high = lcd_read_nibble(); 
0049:  CALL   033
004A:  MOVF   78,W
004B:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
004C:  BCF    06.0
....................    delay_cycles(1); 
004D:  NOP
....................    lcd_output_enable(1); 
004E:  BSF    06.0
....................    delay_us(1); 
004F:  NOP
....................    low = lcd_read_nibble(); 
0050:  CALL   033
0051:  MOVF   78,W
0052:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0053:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0054:  MOVLW  0F
0055:  BSF    03.5
0056:  ANDWF  06,W
0057:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0058:  BCF    03.5
0059:  SWAPF  3B,W
005A:  MOVWF  77
005B:  MOVLW  F0
005C:  ANDWF  77,F
005D:  MOVF   77,W
005E:  IORWF  3A,W
005F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0033:  MOVF   06,W
0034:  MOVWF  77
0035:  SWAPF  06,W
0036:  ANDLW  0F
0037:  MOVWF  78
....................   #endif 
0038:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0027:  SWAPF  3B,W
0028:  ANDLW  F0
0029:  MOVWF  77
002A:  MOVLW  0F
002B:  ANDWF  06,W
002C:  IORWF  77,W
002D:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
002E:  NOP
....................    lcd_output_enable(1); 
002F:  BSF    06.0
....................    delay_us(2); 
0030:  GOTO   031
....................    lcd_output_enable(0); 
0031:  BCF    06.0
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0039:  BSF    03.5
003A:  BCF    06.0
....................    lcd_rs_tris(); 
003B:  BCF    06.1
....................    lcd_rw_tris(); 
003C:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003D:  BCF    03.5
003E:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0060:  MOVF   78,W
0061:  MOVWF  3A
0062:  BTFSC  3A.7
0063:  GOTO   03F
....................    lcd_output_rs(address); 
0064:  BTFSS  38.0
0065:  BCF    06.1
0066:  BTFSC  38.0
0067:  BSF    06.1
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_rw(0); 
0069:  BCF    06.2
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_enable(0); 
006B:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006C:  SWAPF  39,W
006D:  MOVWF  3A
006E:  MOVLW  0F
006F:  ANDWF  3A,F
0070:  MOVF   3A,W
0071:  MOVWF  3B
0072:  CALL   027
....................    lcd_send_nibble(n & 0xf); 
0073:  MOVF   39,W
0074:  ANDLW  0F
0075:  MOVWF  3A
0076:  MOVWF  3B
0077:  CALL   027
0078:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
007D:  BCF    06.0
....................    lcd_rs_tris(); 
007E:  BCF    06.1
....................    lcd_rw_tris(); 
007F:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0080:  BCF    03.5
0081:  BCF    06.1
....................    lcd_output_rw(0); 
0082:  BCF    06.2
....................    lcd_output_enable(0); 
0083:  BCF    06.0
....................      
....................    delay_ms(15); 
0084:  MOVLW  0F
0085:  MOVWF  34
0086:  CALL   012
....................    for(i=1;i<=3;++i) 
0087:  MOVLW  01
0088:  MOVWF  26
0089:  MOVF   26,W
008A:  SUBLW  03
008B:  BTFSS  03.0
008C:  GOTO   095
....................    { 
....................        lcd_send_nibble(3); 
008D:  MOVLW  03
008E:  MOVWF  3B
008F:  CALL   027
....................        delay_ms(5); 
0090:  MOVLW  05
0091:  MOVWF  34
0092:  CALL   012
0093:  INCF   26,F
0094:  GOTO   089
....................    } 
....................     
....................    lcd_send_nibble(2); 
0095:  MOVLW  02
0096:  MOVWF  3B
0097:  CALL   027
....................    delay_ms(5); 
0098:  MOVLW  05
0099:  MOVWF  34
009A:  CALL   012
....................    for(i=0;i<=3;++i) 
009B:  CLRF   26
009C:  MOVF   26,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0A9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A0:  MOVF   26,W
00A1:  CALL   004
00A2:  MOVWF  27
00A3:  CLRF   38
00A4:  MOVF   27,W
00A5:  MOVWF  39
00A6:  CALL   039
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A7:  INCF   26,F
00A8:  GOTO   09C
00A9:  BCF    0A.3
00AA:  BCF    0A.4
00AB:  GOTO   458 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0197:  DECFSZ 35,W
0198:  GOTO   19A
0199:  GOTO   19D
....................       address=LCD_LINE_TWO; 
019A:  MOVLW  40
019B:  MOVWF  36
019C:  GOTO   19E
....................    else 
....................       address=0; 
019D:  CLRF   36
....................       
....................    address+=x-1; 
019E:  MOVLW  01
019F:  SUBWF  34,W
01A0:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
01A1:  MOVF   36,W
01A2:  IORLW  80
01A3:  MOVWF  37
01A4:  CLRF   38
01A5:  MOVF   37,W
01A6:  MOVWF  39
01A7:  CALL   039
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01A8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01A9:  MOVF   33,W
01AA:  XORLW  07
01AB:  BTFSC  03.2
01AC:  GOTO   1B7
01AD:  XORLW  0B
01AE:  BTFSC  03.2
01AF:  GOTO   1BC
01B0:  XORLW  06
01B1:  BTFSC  03.2
01B2:  GOTO   1C4
01B3:  XORLW  02
01B4:  BTFSC  03.2
01B5:  GOTO   1CA
01B6:  GOTO   1CF
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01B7:  MOVLW  01
01B8:  MOVWF  34
01B9:  MOVWF  35
01BA:  CALL   197
01BB:  GOTO   1D4
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01BC:  CLRF   38
01BD:  MOVLW  01
01BE:  MOVWF  39
01BF:  CALL   039
....................                      delay_ms(2); 
01C0:  MOVLW  02
01C1:  MOVWF  34
01C2:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01C3:  GOTO   1D4
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01C4:  MOVLW  01
01C5:  MOVWF  34
01C6:  MOVLW  02
01C7:  MOVWF  35
01C8:  CALL   197
01C9:  GOTO   1D4
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01CA:  CLRF   38
01CB:  MOVLW  10
01CC:  MOVWF  39
01CD:  CALL   039
01CE:  GOTO   1D4
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01CF:  MOVLW  01
01D0:  MOVWF  38
01D1:  MOVF   33,W
01D2:  MOVWF  39
01D3:  CALL   039
....................      #endif 
....................    } 
01D4:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int deger; 
.................... float gerilim; 
....................  
.................... void main(){ 
*
0434:  BSF    03.5
0435:  BSF    1F.0
0436:  BSF    1F.1
0437:  BSF    1F.2
0438:  BCF    1F.3
0439:  MOVLW  07
043A:  MOVWF  1C
043B:  BCF    03.7
043C:  MOVLW  1F
043D:  ANDWF  03,F
....................    setup_psp(PSP_DISABLED); 
043E:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
043F:  BCF    03.5
0440:  CLRF   10
....................    setup_CCP1(CCP_OFF); 
0441:  MOVLW  F0
0442:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0443:  ANDWF  1D,F
....................     
....................    set_tris_a(0x20); //0b 0010 0000 
0444:  MOVLW  20
0445:  BSF    03.5
0446:  MOVWF  05
....................    set_tris_b(0x00); 
0447:  MOVLW  00
0448:  MOVWF  06
....................     
....................    setup_adc(adc_clock_div_32); 
0449:  BCF    1F.6
044A:  BCF    03.5
044B:  BCF    1F.6
044C:  BSF    1F.7
044D:  BSF    03.5
044E:  BSF    1F.7
044F:  BCF    03.5
0450:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
0451:  BSF    03.5
0452:  BCF    1F.0
0453:  BCF    1F.1
0454:  BCF    1F.2
0455:  BCF    1F.3
....................     
....................    lcd_init(); 
0456:  BCF    03.5
0457:  GOTO   079
....................     
....................    while(true){ 
....................       set_adc_channel(4); 
0458:  MOVLW  20
0459:  MOVWF  78
045A:  MOVF   1F,W
045B:  ANDLW  C7
045C:  IORWF  78,W
045D:  MOVWF  1F
....................       delay_us(20); 
045E:  MOVLW  06
045F:  MOVWF  77
0460:  DECFSZ 77,F
0461:  GOTO   460
0462:  NOP
....................        
....................       deger=read_adc(); 
0463:  BSF    1F.2
0464:  BTFSC  1F.2
0465:  GOTO   464
0466:  BSF    03.5
0467:  MOVF   1E,W
0468:  BCF    03.5
0469:  MOVWF  20
046A:  MOVF   1E,W
046B:  MOVWF  21
....................       gerilim=deger/204.6; 
046C:  MOVF   21,W
046D:  MOVWF  27
046E:  MOVF   20,W
046F:  MOVWF  26
0470:  GOTO   0AC
0471:  MOVF   7A,W
0472:  MOVWF  29
0473:  MOVF   79,W
0474:  MOVWF  28
0475:  MOVF   78,W
0476:  MOVWF  27
0477:  MOVF   77,W
0478:  MOVWF  26
0479:  MOVLW  9A
047A:  MOVWF  2D
047B:  MOVLW  99
047C:  MOVWF  2C
047D:  MOVLW  4C
047E:  MOVWF  2B
047F:  MOVLW  86
0480:  MOVWF  2A
0481:  GOTO   0CB
0482:  MOVF   7A,W
0483:  MOVWF  25
0484:  MOVF   79,W
0485:  MOVWF  24
0486:  MOVF   78,W
0487:  MOVWF  23
0488:  MOVF   77,W
0489:  MOVWF  22
....................        
....................       printf(lcd_putc,"\f%lu",deger); 
048A:  MOVLW  0C
048B:  MOVWF  33
048C:  CALL   1A9
048D:  MOVLW  10
048E:  MOVWF  04
048F:  MOVF   21,W
0490:  MOVWF  27
0491:  MOVF   20,W
0492:  MOVWF  26
0493:  GOTO   1D5
....................       printf(lcd_putc,"\n Volt=%f V",gerilim); 
0494:  MOVLW  0C
0495:  BSF    03.6
0496:  MOVWF  0D
0497:  MOVLW  00
0498:  MOVWF  0F
0499:  BCF    03.0
049A:  MOVLW  07
049B:  BCF    03.6
049C:  MOVWF  26
049D:  GOTO   23A
049E:  MOVLW  89
049F:  MOVWF  04
04A0:  MOVF   25,W
04A1:  MOVWF  29
04A2:  MOVF   24,W
04A3:  MOVWF  28
04A4:  MOVF   23,W
04A5:  MOVWF  27
04A6:  MOVF   22,W
04A7:  MOVWF  26
04A8:  MOVLW  02
04A9:  MOVWF  2A
04AA:  GOTO   2DF
04AB:  MOVLW  20
04AC:  MOVWF  33
04AD:  CALL   1A9
04AE:  MOVLW  56
04AF:  MOVWF  33
04B0:  CALL   1A9
....................       delay_ms(100); 
04B1:  MOVLW  64
04B2:  MOVWF  34
04B3:  CALL   012
04B4:  GOTO   458
....................    } 
.................... } 
04B5:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
